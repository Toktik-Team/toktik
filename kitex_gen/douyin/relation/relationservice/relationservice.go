// Code generated by Kitex v0.4.4. DO NOT EDIT.

package relationservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
	relation "toktik/kitex_gen/douyin/relation"
)

func serviceInfo() *kitex.ServiceInfo {
	return relationServiceServiceInfo
}

var relationServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "RelationService"
	handlerType := (*relation.RelationService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Follow":          kitex.NewMethodInfo(followHandler, newFollowArgs, newFollowResult, false),
		"Unfollow":        kitex.NewMethodInfo(unfollowHandler, newUnfollowArgs, newUnfollowResult, false),
		"GetFollowList":   kitex.NewMethodInfo(getFollowListHandler, newGetFollowListArgs, newGetFollowListResult, false),
		"GetFollowerList": kitex.NewMethodInfo(getFollowerListHandler, newGetFollowerListArgs, newGetFollowerListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "douyin.user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func followHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.RelationActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationService).Follow(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *FollowArgs:
		success, err := handler.(relation.RelationService).Follow(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*FollowResult)
		realResult.Success = success
	}
	return nil
}
func newFollowArgs() interface{} {
	return &FollowArgs{}
}

func newFollowResult() interface{} {
	return &FollowResult{}
}

type FollowArgs struct {
	Req *relation.RelationActionRequest
}

func (p *FollowArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.RelationActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *FollowArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *FollowArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *FollowArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in FollowArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *FollowArgs) Unmarshal(in []byte) error {
	msg := new(relation.RelationActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var FollowArgs_Req_DEFAULT *relation.RelationActionRequest

func (p *FollowArgs) GetReq() *relation.RelationActionRequest {
	if !p.IsSetReq() {
		return FollowArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *FollowArgs) IsSetReq() bool {
	return p.Req != nil
}

type FollowResult struct {
	Success *relation.RelationActionResponse
}

var FollowResult_Success_DEFAULT *relation.RelationActionResponse

func (p *FollowResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.RelationActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *FollowResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *FollowResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *FollowResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in FollowResult")
	}
	return proto.Marshal(p.Success)
}

func (p *FollowResult) Unmarshal(in []byte) error {
	msg := new(relation.RelationActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *FollowResult) GetSuccess() *relation.RelationActionResponse {
	if !p.IsSetSuccess() {
		return FollowResult_Success_DEFAULT
	}
	return p.Success
}

func (p *FollowResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.RelationActionResponse)
}

func (p *FollowResult) IsSetSuccess() bool {
	return p.Success != nil
}

func unfollowHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.RelationActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationService).Unfollow(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *UnfollowArgs:
		success, err := handler.(relation.RelationService).Unfollow(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*UnfollowResult)
		realResult.Success = success
	}
	return nil
}
func newUnfollowArgs() interface{} {
	return &UnfollowArgs{}
}

func newUnfollowResult() interface{} {
	return &UnfollowResult{}
}

type UnfollowArgs struct {
	Req *relation.RelationActionRequest
}

func (p *UnfollowArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.RelationActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UnfollowArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UnfollowArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UnfollowArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UnfollowArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UnfollowArgs) Unmarshal(in []byte) error {
	msg := new(relation.RelationActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UnfollowArgs_Req_DEFAULT *relation.RelationActionRequest

func (p *UnfollowArgs) GetReq() *relation.RelationActionRequest {
	if !p.IsSetReq() {
		return UnfollowArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UnfollowArgs) IsSetReq() bool {
	return p.Req != nil
}

type UnfollowResult struct {
	Success *relation.RelationActionResponse
}

var UnfollowResult_Success_DEFAULT *relation.RelationActionResponse

func (p *UnfollowResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.RelationActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UnfollowResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UnfollowResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UnfollowResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UnfollowResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UnfollowResult) Unmarshal(in []byte) error {
	msg := new(relation.RelationActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UnfollowResult) GetSuccess() *relation.RelationActionResponse {
	if !p.IsSetSuccess() {
		return UnfollowResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UnfollowResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.RelationActionResponse)
}

func (p *UnfollowResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getFollowListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.FollowListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationService).GetFollowList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFollowListArgs:
		success, err := handler.(relation.RelationService).GetFollowList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFollowListResult)
		realResult.Success = success
	}
	return nil
}
func newGetFollowListArgs() interface{} {
	return &GetFollowListArgs{}
}

func newGetFollowListResult() interface{} {
	return &GetFollowListResult{}
}

type GetFollowListArgs struct {
	Req *relation.FollowListRequest
}

func (p *GetFollowListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.FollowListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFollowListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFollowListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFollowListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFollowListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFollowListArgs) Unmarshal(in []byte) error {
	msg := new(relation.FollowListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFollowListArgs_Req_DEFAULT *relation.FollowListRequest

func (p *GetFollowListArgs) GetReq() *relation.FollowListRequest {
	if !p.IsSetReq() {
		return GetFollowListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFollowListArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetFollowListResult struct {
	Success *relation.FollowListResponse
}

var GetFollowListResult_Success_DEFAULT *relation.FollowListResponse

func (p *GetFollowListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.FollowListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFollowListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFollowListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFollowListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFollowListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFollowListResult) Unmarshal(in []byte) error {
	msg := new(relation.FollowListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFollowListResult) GetSuccess() *relation.FollowListResponse {
	if !p.IsSetSuccess() {
		return GetFollowListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFollowListResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.FollowListResponse)
}

func (p *GetFollowListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getFollowerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.FollowerListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationService).GetFollowerList(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetFollowerListArgs:
		success, err := handler.(relation.RelationService).GetFollowerList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetFollowerListResult)
		realResult.Success = success
	}
	return nil
}
func newGetFollowerListArgs() interface{} {
	return &GetFollowerListArgs{}
}

func newGetFollowerListResult() interface{} {
	return &GetFollowerListResult{}
}

type GetFollowerListArgs struct {
	Req *relation.FollowerListRequest
}

func (p *GetFollowerListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.FollowerListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetFollowerListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetFollowerListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetFollowerListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetFollowerListArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetFollowerListArgs) Unmarshal(in []byte) error {
	msg := new(relation.FollowerListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetFollowerListArgs_Req_DEFAULT *relation.FollowerListRequest

func (p *GetFollowerListArgs) GetReq() *relation.FollowerListRequest {
	if !p.IsSetReq() {
		return GetFollowerListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetFollowerListArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetFollowerListResult struct {
	Success *relation.FollowerListResponse
}

var GetFollowerListResult_Success_DEFAULT *relation.FollowerListResponse

func (p *GetFollowerListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.FollowerListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetFollowerListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetFollowerListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetFollowerListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetFollowerListResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetFollowerListResult) Unmarshal(in []byte) error {
	msg := new(relation.FollowerListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetFollowerListResult) GetSuccess() *relation.FollowerListResponse {
	if !p.IsSetSuccess() {
		return GetFollowerListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetFollowerListResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.FollowerListResponse)
}

func (p *GetFollowerListResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Follow(ctx context.Context, Req *relation.RelationActionRequest) (r *relation.RelationActionResponse, err error) {
	var _args FollowArgs
	_args.Req = Req
	var _result FollowResult
	if err = p.c.Call(ctx, "Follow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Unfollow(ctx context.Context, Req *relation.RelationActionRequest) (r *relation.RelationActionResponse, err error) {
	var _args UnfollowArgs
	_args.Req = Req
	var _result UnfollowResult
	if err = p.c.Call(ctx, "Unfollow", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowList(ctx context.Context, Req *relation.FollowListRequest) (r *relation.FollowListResponse, err error) {
	var _args GetFollowListArgs
	_args.Req = Req
	var _result GetFollowListResult
	if err = p.c.Call(ctx, "GetFollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFollowerList(ctx context.Context, Req *relation.FollowerListRequest) (r *relation.FollowerListResponse, err error) {
	var _args GetFollowerListArgs
	_args.Req = Req
	var _result GetFollowerListResult
	if err = p.c.Call(ctx, "GetFollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
