// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"toktik/service/publish/model"
)

func newPublish(db *gorm.DB, opts ...gen.DOOption) publish {
	_publish := publish{}

	_publish.publishDo.UseDB(db, opts...)
	_publish.publishDo.UseModel(&model.Publish{})

	tableName := _publish.publishDo.TableName()
	_publish.ALL = field.NewAsterisk(tableName)
	_publish.ID = field.NewUint(tableName, "id")
	_publish.CreatedAt = field.NewTime(tableName, "created_at")
	_publish.UpdatedAt = field.NewTime(tableName, "updated_at")
	_publish.DeletedAt = field.NewField(tableName, "deleted_at")
	_publish.UserId = field.NewInt64(tableName, "user_id")
	_publish.Title = field.NewString(tableName, "title")
	_publish.PlayUrl = field.NewString(tableName, "play_url")
	_publish.CoverUrl = field.NewString(tableName, "cover_url")

	_publish.fillFieldMap()

	return _publish
}

type publish struct {
	publishDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	UserId    field.Int64
	Title     field.String
	PlayUrl   field.String
	CoverUrl  field.String

	fieldMap map[string]field.Expr
}

func (p publish) Table(newTableName string) *publish {
	p.publishDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p publish) As(alias string) *publish {
	p.publishDo.DO = *(p.publishDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *publish) updateTableName(table string) *publish {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.UserId = field.NewInt64(table, "user_id")
	p.Title = field.NewString(table, "title")
	p.PlayUrl = field.NewString(table, "play_url")
	p.CoverUrl = field.NewString(table, "cover_url")

	p.fillFieldMap()

	return p
}

func (p *publish) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *publish) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["user_id"] = p.UserId
	p.fieldMap["title"] = p.Title
	p.fieldMap["play_url"] = p.PlayUrl
	p.fieldMap["cover_url"] = p.CoverUrl
}

func (p publish) clone(db *gorm.DB) publish {
	p.publishDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p publish) replaceDB(db *gorm.DB) publish {
	p.publishDo.ReplaceDB(db)
	return p
}

type publishDo struct{ gen.DO }

type IPublishDo interface {
	gen.SubQuery
	Debug() IPublishDo
	WithContext(ctx context.Context) IPublishDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPublishDo
	WriteDB() IPublishDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPublishDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPublishDo
	Not(conds ...gen.Condition) IPublishDo
	Or(conds ...gen.Condition) IPublishDo
	Select(conds ...field.Expr) IPublishDo
	Where(conds ...gen.Condition) IPublishDo
	Order(conds ...field.Expr) IPublishDo
	Distinct(cols ...field.Expr) IPublishDo
	Omit(cols ...field.Expr) IPublishDo
	Join(table schema.Tabler, on ...field.Expr) IPublishDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPublishDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPublishDo
	Group(cols ...field.Expr) IPublishDo
	Having(conds ...gen.Condition) IPublishDo
	Limit(limit int) IPublishDo
	Offset(offset int) IPublishDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPublishDo
	Unscoped() IPublishDo
	Create(values ...*model.Publish) error
	CreateInBatches(values []*model.Publish, batchSize int) error
	Save(values ...*model.Publish) error
	First() (*model.Publish, error)
	Take() (*model.Publish, error)
	Last() (*model.Publish, error)
	Find() ([]*model.Publish, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Publish, err error)
	FindInBatches(result *[]*model.Publish, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Publish) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPublishDo
	Assign(attrs ...field.AssignExpr) IPublishDo
	Joins(fields ...field.RelationField) IPublishDo
	Preload(fields ...field.RelationField) IPublishDo
	FirstOrInit() (*model.Publish, error)
	FirstOrCreate() (*model.Publish, error)
	FindByPage(offset int, limit int) (result []*model.Publish, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPublishDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FilterWithNameAndRole(name string, role string) (result []model.Publish, err error)
}

// SELECT * FROM @@table WHERE name = @name{{if role !=""}} AND role = @role{{end}}
func (p publishDo) FilterWithNameAndRole(name string, role string) (result []model.Publish, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM publishes WHERE name = ? ")
	if role != "" {
		params = append(params, role)
		generateSQL.WriteString("AND role = ? ")
	}

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (p publishDo) Debug() IPublishDo {
	return p.withDO(p.DO.Debug())
}

func (p publishDo) WithContext(ctx context.Context) IPublishDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p publishDo) ReadDB() IPublishDo {
	return p.Clauses(dbresolver.Read)
}

func (p publishDo) WriteDB() IPublishDo {
	return p.Clauses(dbresolver.Write)
}

func (p publishDo) Session(config *gorm.Session) IPublishDo {
	return p.withDO(p.DO.Session(config))
}

func (p publishDo) Clauses(conds ...clause.Expression) IPublishDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p publishDo) Returning(value interface{}, columns ...string) IPublishDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p publishDo) Not(conds ...gen.Condition) IPublishDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p publishDo) Or(conds ...gen.Condition) IPublishDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p publishDo) Select(conds ...field.Expr) IPublishDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p publishDo) Where(conds ...gen.Condition) IPublishDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p publishDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IPublishDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p publishDo) Order(conds ...field.Expr) IPublishDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p publishDo) Distinct(cols ...field.Expr) IPublishDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p publishDo) Omit(cols ...field.Expr) IPublishDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p publishDo) Join(table schema.Tabler, on ...field.Expr) IPublishDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p publishDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPublishDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p publishDo) RightJoin(table schema.Tabler, on ...field.Expr) IPublishDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p publishDo) Group(cols ...field.Expr) IPublishDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p publishDo) Having(conds ...gen.Condition) IPublishDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p publishDo) Limit(limit int) IPublishDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p publishDo) Offset(offset int) IPublishDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p publishDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPublishDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p publishDo) Unscoped() IPublishDo {
	return p.withDO(p.DO.Unscoped())
}

func (p publishDo) Create(values ...*model.Publish) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p publishDo) CreateInBatches(values []*model.Publish, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p publishDo) Save(values ...*model.Publish) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p publishDo) First() (*model.Publish, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Publish), nil
	}
}

func (p publishDo) Take() (*model.Publish, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Publish), nil
	}
}

func (p publishDo) Last() (*model.Publish, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Publish), nil
	}
}

func (p publishDo) Find() ([]*model.Publish, error) {
	result, err := p.DO.Find()
	return result.([]*model.Publish), err
}

func (p publishDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Publish, err error) {
	buf := make([]*model.Publish, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p publishDo) FindInBatches(result *[]*model.Publish, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p publishDo) Attrs(attrs ...field.AssignExpr) IPublishDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p publishDo) Assign(attrs ...field.AssignExpr) IPublishDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p publishDo) Joins(fields ...field.RelationField) IPublishDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p publishDo) Preload(fields ...field.RelationField) IPublishDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p publishDo) FirstOrInit() (*model.Publish, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Publish), nil
	}
}

func (p publishDo) FirstOrCreate() (*model.Publish, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Publish), nil
	}
}

func (p publishDo) FindByPage(offset int, limit int) (result []*model.Publish, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p publishDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p publishDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p publishDo) Delete(models ...*model.Publish) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *publishDo) withDO(do gen.Dao) *publishDo {
	p.DO = *do.(*gen.DO)
	return p
}
